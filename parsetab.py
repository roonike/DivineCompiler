
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL COMA DEF DIVIDE DOSPUNTOS DOUBLEQUOTES ELSE FALSE FLOAT FOR ID IF IGUALIGUAL INT LBRACKET LPAREN MAYORIGUAL MAYORQUE MENORIGUAL MENORQUE MINUS NOIGUAL NUMERO OR PLUS PUNTOCOMA RBRACKET REAL RETURN RPAREN SINGLEQUOTES STRING TEXT TIMES TRUE WHILE\n    program : statement\n        | program statement\n    \n    declaration : init_declarator PUNTOCOMA\n        | declarator ASSIGN function_call \n    \n    init_declarator : declarator\n        | declarator ASSIGN assignment_expression\n    \n    declarator : ID DOSPUNTOS type_specifier\n        | NUMERO ID DOSPUNTOS type_specifier\n    \n    type_specifier : INT\n        | FLOAT\n        | STRING\n        | BOOL\n    \n    literal : NUMERO\n        | REAL\n        | TEXT\n        | TRUE\n        | FALSE\n    \n    primary_expression : ID\n        | literal\n        | LPAREN assignment_expression RPAREN\n    \n    additive_expression : primary_expression          \n        | additive_expression PLUS primary_expression\n        | additive_expression MINUS primary_expression\n    \n    multiplicative_expression : additive_expression\n        | multiplicative_expression TIMES additive_expression\n        | multiplicative_expression DIVIDE additive_expression\n    \n    relational_expression : multiplicative_expression\n        | relational_expression MENORQUE multiplicative_expression\n        | relational_expression MAYORQUE multiplicative_expression\n        | relational_expression MENORIGUAL multiplicative_expression\n        | relational_expression MAYORIGUAL multiplicative_expression\n    \n    equality_expression : relational_expression\n        | equality_expression IGUALIGUAL relational_expression\n        | equality_expression NOIGUAL relational_expression\n    \n    and_expression : equality_expression\n        | and_expression AND equality_expression\n    \n    or_expression : and_expression\n        | or_expression OR and_expression\n    \n    assignment_expression : or_expression\n        | primary_expression ASSIGN multiplicative_expression\n    \n    statement : function_call\n        | compound_statement\n        | assignment_statement \n        | function_definition\n        | declaration\n        | selection_statement\n        | iteration_statement\n    \n    statement_list : statement\n        | statement_list statement\n    \n    compound_statement : LPAREN RPAREN\n        | LPAREN statement_list RPAREN\n    \n    assignment_statement : assignment_expression PUNTOCOMA\n        | primary_expression ASSIGN function_call\n    \n    ID_list : empty \n        | ID DOSPUNTOS type_specifier\n        | ID_list COMA ID  DOSPUNTOS  type_specifier\n    \n    parameter_list : empty \n        | assignment_expression\n        | parameter_list COMA assignment_expression\n    \n    function_definition : DEF ID LPAREN ID_list RPAREN compound_statement\n    \n    function_call : ID LPAREN parameter_list RPAREN PUNTOCOMA\n    \n    selection_statement : IF assignment_expression compound_statement\n        | IF assignment_expression compound_statement ELSE compound_statement\n    \n    iteration_statement : FOR LPAREN NUMERO RPAREN DOSPUNTOS\n    empty :'
    
_lr_action_items = {'ID':([0,1,2,3,4,5,6,7,8,9,11,14,17,19,31,32,34,35,36,38,41,42,43,45,46,50,54,55,56,57,58,59,60,61,62,63,64,65,74,75,77,79,82,83,85,86,87,104,111,115,116,117,119,],[10,10,-1,-41,-42,-43,-44,-45,-46,-47,40,44,49,53,-2,49,40,-50,10,-48,53,-52,81,-3,81,49,49,49,49,49,49,49,49,49,49,49,49,49,-51,-49,81,-53,105,-4,-62,10,49,49,-61,120,-63,-64,-60,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,11,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,38,40,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,74,75,76,77,78,79,80,81,83,85,86,87,91,92,93,94,95,96,97,98,99,100,101,102,104,108,111,114,116,117,119,],[11,11,-1,-41,-42,-43,-44,-45,-46,-47,32,34,50,52,-39,-27,-19,-37,-14,-15,-16,-17,-35,-32,-24,-2,50,34,-50,11,-48,32,-52,50,82,-3,50,86,-21,-18,50,-13,50,50,50,50,50,50,50,50,50,50,50,50,-51,-49,-20,50,-21,-53,-40,32,-4,-62,11,50,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,50,86,-61,86,-63,-64,-60,]),'DEF':([0,1,2,3,4,5,6,7,8,9,11,31,34,35,36,38,42,45,74,75,79,83,85,86,111,116,117,119,],[14,14,-1,-41,-42,-43,-44,-45,-46,-47,14,-2,14,-50,14,-48,-52,-3,-51,-49,-53,-4,-62,14,-61,-63,-64,-60,]),'IF':([0,1,2,3,4,5,6,7,8,9,11,31,34,35,36,38,42,45,74,75,79,83,85,86,111,116,117,119,],[17,17,-1,-41,-42,-43,-44,-45,-46,-47,17,-2,17,-50,17,-48,-52,-3,-51,-49,-53,-4,-62,17,-61,-63,-64,-60,]),'FOR':([0,1,2,3,4,5,6,7,8,9,11,31,34,35,36,38,42,45,74,75,79,83,85,86,111,116,117,119,],[18,18,-1,-41,-42,-43,-44,-45,-46,-47,18,-2,18,-50,18,-48,-52,-3,-51,-49,-53,-4,-62,18,-61,-63,-64,-60,]),'NUMERO':([0,1,2,3,4,5,6,7,8,9,11,17,31,32,34,35,36,38,42,43,45,46,50,52,54,55,56,57,58,59,60,61,62,63,64,65,74,75,77,79,83,85,86,87,104,111,116,117,119,],[19,19,-1,-41,-42,-43,-44,-45,-46,-47,41,51,-2,51,41,-50,19,-48,-52,51,-3,51,51,89,51,51,51,51,51,51,51,51,51,51,51,51,-51,-49,51,-53,-4,-62,19,51,51,-61,-63,-64,-60,]),'REAL':([0,1,2,3,4,5,6,7,8,9,11,17,31,32,34,35,36,38,42,43,45,46,50,54,55,56,57,58,59,60,61,62,63,64,65,74,75,77,79,83,85,86,87,104,111,116,117,119,],[24,24,-1,-41,-42,-43,-44,-45,-46,-47,24,24,-2,24,24,-50,24,-48,-52,24,-3,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-51,-49,24,-53,-4,-62,24,24,24,-61,-63,-64,-60,]),'TEXT':([0,1,2,3,4,5,6,7,8,9,11,17,31,32,34,35,36,38,42,43,45,46,50,54,55,56,57,58,59,60,61,62,63,64,65,74,75,77,79,83,85,86,87,104,111,116,117,119,],[25,25,-1,-41,-42,-43,-44,-45,-46,-47,25,25,-2,25,25,-50,25,-48,-52,25,-3,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-51,-49,25,-53,-4,-62,25,25,25,-61,-63,-64,-60,]),'TRUE':([0,1,2,3,4,5,6,7,8,9,11,17,31,32,34,35,36,38,42,43,45,46,50,54,55,56,57,58,59,60,61,62,63,64,65,74,75,77,79,83,85,86,87,104,111,116,117,119,],[26,26,-1,-41,-42,-43,-44,-45,-46,-47,26,26,-2,26,26,-50,26,-48,-52,26,-3,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-51,-49,26,-53,-4,-62,26,26,26,-61,-63,-64,-60,]),'FALSE':([0,1,2,3,4,5,6,7,8,9,11,17,31,32,34,35,36,38,42,43,45,46,50,54,55,56,57,58,59,60,61,62,63,64,65,74,75,77,79,83,85,86,87,104,111,116,117,119,],[27,27,-1,-41,-42,-43,-44,-45,-46,-47,27,27,-2,27,27,-50,27,-48,-52,27,-3,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-51,-49,27,-53,-4,-62,27,27,27,-61,-63,-64,-60,]),'$end':([1,2,3,4,5,6,7,8,9,31,35,42,45,74,79,83,85,111,116,117,119,],[0,-1,-41,-42,-43,-44,-45,-46,-47,-2,-50,-52,-3,-51,-53,-4,-62,-61,-63,-64,-60,]),'RPAREN':([3,4,5,6,7,8,9,11,20,21,22,23,24,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,45,48,49,51,66,67,68,70,71,72,73,74,75,76,78,79,80,81,82,83,85,86,88,89,91,92,93,94,95,96,97,98,99,100,101,102,106,107,111,112,116,117,118,119,122,],[-41,-42,-43,-44,-45,-46,-47,35,-39,-27,-19,-37,-14,-15,-16,-17,-35,-32,-24,-65,35,-50,74,76,-48,-21,-18,-13,-52,-3,-21,-18,-13,103,-57,-58,-9,-10,-11,-12,-51,-49,-20,-21,-53,-40,-18,-65,-4,-62,35,76,109,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,114,-54,-61,-59,-63,-64,-55,-60,-56,]),'ASSIGN':([10,13,16,19,22,24,25,26,27,39,40,41,48,49,51,69,70,71,72,73,76,81,110,],[-18,43,46,-13,-19,-14,-15,-16,-17,77,-18,-13,87,-18,-13,-7,-9,-10,-11,-12,-20,-18,-8,]),'PLUS':([10,13,19,22,24,25,26,27,30,39,40,41,48,49,51,76,78,81,92,93,101,102,],[-18,-21,-13,-19,-14,-15,-16,-17,64,-21,-18,-13,-21,-18,-13,-20,-21,-18,64,64,-22,-23,]),'MINUS':([10,13,19,22,24,25,26,27,30,39,40,41,48,49,51,76,78,81,92,93,101,102,],[-18,-21,-13,-19,-14,-15,-16,-17,65,-21,-18,-13,-21,-18,-13,-20,-21,-18,65,65,-22,-23,]),'TIMES':([10,13,19,21,22,24,25,26,27,30,39,40,41,48,49,51,76,78,80,81,92,93,97,98,99,100,101,102,],[-18,-21,-13,55,-19,-14,-15,-16,-17,-24,-21,-18,-13,-21,-18,-13,-20,-21,55,-18,-25,-26,55,55,55,55,-22,-23,]),'DIVIDE':([10,13,19,21,22,24,25,26,27,30,39,40,41,48,49,51,76,78,80,81,92,93,97,98,99,100,101,102,],[-18,-21,-13,56,-19,-14,-15,-16,-17,-24,-21,-18,-13,-21,-18,-13,-20,-21,56,-18,-25,-26,56,56,56,56,-22,-23,]),'MENORQUE':([10,13,19,21,22,24,25,26,27,29,30,39,40,41,48,49,51,76,78,81,92,93,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,-14,-15,-16,-17,60,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-25,-26,60,60,-28,-29,-30,-31,-22,-23,]),'MAYORQUE':([10,13,19,21,22,24,25,26,27,29,30,39,40,41,48,49,51,76,78,81,92,93,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,-14,-15,-16,-17,61,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-25,-26,61,61,-28,-29,-30,-31,-22,-23,]),'MENORIGUAL':([10,13,19,21,22,24,25,26,27,29,30,39,40,41,48,49,51,76,78,81,92,93,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,-14,-15,-16,-17,62,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-25,-26,62,62,-28,-29,-30,-31,-22,-23,]),'MAYORIGUAL':([10,13,19,21,22,24,25,26,27,29,30,39,40,41,48,49,51,76,78,81,92,93,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,-14,-15,-16,-17,63,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-25,-26,63,63,-28,-29,-30,-31,-22,-23,]),'IGUALIGUAL':([10,13,19,21,22,24,25,26,27,28,29,30,39,40,41,48,49,51,76,78,81,92,93,94,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,-14,-15,-16,-17,58,-32,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-25,-26,58,-33,-34,-28,-29,-30,-31,-22,-23,]),'NOIGUAL':([10,13,19,21,22,24,25,26,27,28,29,30,39,40,41,48,49,51,76,78,81,92,93,94,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,-14,-15,-16,-17,59,-32,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-25,-26,59,-33,-34,-28,-29,-30,-31,-22,-23,]),'AND':([10,13,19,21,22,23,24,25,26,27,28,29,30,39,40,41,48,49,51,76,78,81,91,92,93,94,95,96,97,98,99,100,101,102,],[-18,-21,-13,-27,-19,57,-14,-15,-16,-17,-35,-32,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,57,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,]),'OR':([10,13,19,20,21,22,23,24,25,26,27,28,29,30,39,40,41,48,49,51,76,78,81,91,92,93,94,95,96,97,98,99,100,101,102,],[-18,-21,-13,54,-27,-19,-37,-14,-15,-16,-17,-35,-32,-24,-21,-18,-13,-21,-18,-13,-20,-21,-18,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,]),'PUNTOCOMA':([10,12,13,15,16,19,20,21,22,23,24,25,26,27,28,29,30,37,39,40,41,48,49,51,69,70,71,72,73,76,78,80,81,84,91,92,93,94,95,96,97,98,99,100,101,102,103,110,],[-18,42,-21,45,-5,-13,-39,-27,-19,-37,-14,-15,-16,-17,-35,-32,-24,42,-21,-18,-13,-21,-18,-13,-7,-9,-10,-11,-12,-20,-21,-40,-18,-6,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,111,-8,]),'DOSPUNTOS':([10,40,53,105,109,120,],[33,33,90,113,117,121,]),'COMA':([20,21,22,23,24,25,26,27,28,29,30,32,48,49,51,66,67,68,70,71,72,73,76,78,80,82,91,92,93,94,95,96,97,98,99,100,101,102,106,107,112,118,122,],[-39,-27,-19,-37,-14,-15,-16,-17,-35,-32,-24,-65,-21,-18,-13,104,-57,-58,-9,-10,-11,-12,-20,-21,-40,-65,-38,-25,-26,-36,-33,-34,-28,-29,-30,-31,-22,-23,115,-54,-59,-55,-56,]),'INT':([33,90,113,121,],[70,70,70,70,]),'FLOAT':([33,90,113,121,],[71,71,71,71,]),'STRING':([33,90,113,121,],[72,72,72,72,]),'BOOL':([33,90,113,121,],[73,73,73,73,]),'ELSE':([35,74,85,],[-50,-51,108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,1,11,34,36,86,],[2,31,38,38,75,38,]),'function_call':([0,1,11,34,36,43,46,77,86,],[3,3,3,3,3,79,83,79,3,]),'compound_statement':([0,1,11,34,36,47,86,108,114,],[4,4,4,4,4,85,4,116,119,]),'assignment_statement':([0,1,11,34,36,86,],[5,5,5,5,5,5,]),'function_definition':([0,1,11,34,36,86,],[6,6,6,6,6,6,]),'declaration':([0,1,11,34,36,86,],[7,7,7,7,7,7,]),'selection_statement':([0,1,11,34,36,86,],[8,8,8,8,8,8,]),'iteration_statement':([0,1,11,34,36,86,],[9,9,9,9,9,9,]),'assignment_expression':([0,1,11,17,32,34,36,46,50,86,104,],[12,12,37,47,68,37,12,84,88,12,112,]),'primary_expression':([0,1,11,17,32,34,36,43,46,50,54,55,56,57,58,59,60,61,62,63,64,65,77,86,87,104,],[13,13,39,48,48,39,13,78,48,48,78,78,78,78,78,78,78,78,78,78,101,102,78,13,78,48,]),'init_declarator':([0,1,11,34,36,86,],[15,15,15,15,15,15,]),'declarator':([0,1,11,34,36,86,],[16,16,16,16,16,16,]),'or_expression':([0,1,11,17,32,34,36,46,50,86,104,],[20,20,20,20,20,20,20,20,20,20,20,]),'multiplicative_expression':([0,1,11,17,32,34,36,43,46,50,54,57,58,59,60,61,62,63,77,86,87,104,],[21,21,21,21,21,21,21,80,21,21,21,21,21,21,97,98,99,100,80,21,80,21,]),'literal':([0,1,11,17,32,34,36,43,46,50,54,55,56,57,58,59,60,61,62,63,64,65,77,86,87,104,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'and_expression':([0,1,11,17,32,34,36,46,50,54,86,104,],[23,23,23,23,23,23,23,23,23,91,23,23,]),'equality_expression':([0,1,11,17,32,34,36,46,50,54,57,86,104,],[28,28,28,28,28,28,28,28,28,28,94,28,28,]),'relational_expression':([0,1,11,17,32,34,36,46,50,54,57,58,59,86,104,],[29,29,29,29,29,29,29,29,29,29,29,95,96,29,29,]),'additive_expression':([0,1,11,17,32,34,36,43,46,50,54,55,56,57,58,59,60,61,62,63,77,86,87,104,],[30,30,30,30,30,30,30,30,30,30,30,92,93,30,30,30,30,30,30,30,30,30,30,30,]),'statement_list':([11,34,86,],[36,36,36,]),'parameter_list':([32,],[66,]),'empty':([32,82,],[67,107,]),'type_specifier':([33,90,113,121,],[69,110,118,122,]),'ID_list':([82,],[106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','calclex.py',145),
  ('program -> program statement','program',2,'p_program','calclex.py',146),
  ('declaration -> init_declarator PUNTOCOMA','declaration',2,'p_declaration','calclex.py',155),
  ('declaration -> declarator ASSIGN function_call','declaration',3,'p_declaration','calclex.py',156),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','calclex.py',163),
  ('init_declarator -> declarator ASSIGN assignment_expression','init_declarator',3,'p_init_declarator','calclex.py',164),
  ('declarator -> ID DOSPUNTOS type_specifier','declarator',3,'p_declarator','calclex.py',171),
  ('declarator -> NUMERO ID DOSPUNTOS type_specifier','declarator',4,'p_declarator','calclex.py',172),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','calclex.py',181),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','calclex.py',182),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','calclex.py',183),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','calclex.py',184),
  ('literal -> NUMERO','literal',1,'p_literal','calclex.py',191),
  ('literal -> REAL','literal',1,'p_literal','calclex.py',192),
  ('literal -> TEXT','literal',1,'p_literal','calclex.py',193),
  ('literal -> TRUE','literal',1,'p_literal','calclex.py',194),
  ('literal -> FALSE','literal',1,'p_literal','calclex.py',195),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','calclex.py',202),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','calclex.py',203),
  ('primary_expression -> LPAREN assignment_expression RPAREN','primary_expression',3,'p_primary_expression','calclex.py',204),
  ('additive_expression -> primary_expression','additive_expression',1,'p_additive_expression','calclex.py',210),
  ('additive_expression -> additive_expression PLUS primary_expression','additive_expression',3,'p_additive_expression','calclex.py',211),
  ('additive_expression -> additive_expression MINUS primary_expression','additive_expression',3,'p_additive_expression','calclex.py',212),
  ('multiplicative_expression -> additive_expression','multiplicative_expression',1,'p_multiplicative_expression','calclex.py',219),
  ('multiplicative_expression -> multiplicative_expression TIMES additive_expression','multiplicative_expression',3,'p_multiplicative_expression','calclex.py',220),
  ('multiplicative_expression -> multiplicative_expression DIVIDE additive_expression','multiplicative_expression',3,'p_multiplicative_expression','calclex.py',221),
  ('relational_expression -> multiplicative_expression','relational_expression',1,'p_relational_expression','calclex.py',228),
  ('relational_expression -> relational_expression MENORQUE multiplicative_expression','relational_expression',3,'p_relational_expression','calclex.py',229),
  ('relational_expression -> relational_expression MAYORQUE multiplicative_expression','relational_expression',3,'p_relational_expression','calclex.py',230),
  ('relational_expression -> relational_expression MENORIGUAL multiplicative_expression','relational_expression',3,'p_relational_expression','calclex.py',231),
  ('relational_expression -> relational_expression MAYORIGUAL multiplicative_expression','relational_expression',3,'p_relational_expression','calclex.py',232),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','calclex.py',238),
  ('equality_expression -> equality_expression IGUALIGUAL relational_expression','equality_expression',3,'p_equality_expression','calclex.py',239),
  ('equality_expression -> equality_expression NOIGUAL relational_expression','equality_expression',3,'p_equality_expression','calclex.py',240),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','calclex.py',246),
  ('and_expression -> and_expression AND equality_expression','and_expression',3,'p_and_expression','calclex.py',247),
  ('or_expression -> and_expression','or_expression',1,'p_or_expression','calclex.py',252),
  ('or_expression -> or_expression OR and_expression','or_expression',3,'p_or_expression','calclex.py',253),
  ('assignment_expression -> or_expression','assignment_expression',1,'p_assignment_expression','calclex.py',259),
  ('assignment_expression -> primary_expression ASSIGN multiplicative_expression','assignment_expression',3,'p_assignment_expression','calclex.py',260),
  ('statement -> function_call','statement',1,'p_statement','calclex.py',268),
  ('statement -> compound_statement','statement',1,'p_statement','calclex.py',269),
  ('statement -> assignment_statement','statement',1,'p_statement','calclex.py',270),
  ('statement -> function_definition','statement',1,'p_statement','calclex.py',271),
  ('statement -> declaration','statement',1,'p_statement','calclex.py',272),
  ('statement -> selection_statement','statement',1,'p_statement','calclex.py',273),
  ('statement -> iteration_statement','statement',1,'p_statement','calclex.py',274),
  ('statement_list -> statement','statement_list',1,'p_statement_list','calclex.py',280),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','calclex.py',281),
  ('compound_statement -> LPAREN RPAREN','compound_statement',2,'p_compound_statement','calclex.py',286),
  ('compound_statement -> LPAREN statement_list RPAREN','compound_statement',3,'p_compound_statement','calclex.py',287),
  ('assignment_statement -> assignment_expression PUNTOCOMA','assignment_statement',2,'p_assignment_statement','calclex.py',292),
  ('assignment_statement -> primary_expression ASSIGN function_call','assignment_statement',3,'p_assignment_statement','calclex.py',293),
  ('ID_list -> empty','ID_list',1,'p_ID_list','calclex.py',299),
  ('ID_list -> ID DOSPUNTOS type_specifier','ID_list',3,'p_ID_list','calclex.py',300),
  ('ID_list -> ID_list COMA ID DOSPUNTOS type_specifier','ID_list',5,'p_ID_list','calclex.py',301),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','calclex.py',305),
  ('parameter_list -> assignment_expression','parameter_list',1,'p_parameter_list','calclex.py',306),
  ('parameter_list -> parameter_list COMA assignment_expression','parameter_list',3,'p_parameter_list','calclex.py',307),
  ('function_definition -> DEF ID LPAREN ID_list RPAREN compound_statement','function_definition',6,'p_function_definition','calclex.py',312),
  ('function_call -> ID LPAREN parameter_list RPAREN PUNTOCOMA','function_call',5,'p_function_call','calclex.py',319),
  ('selection_statement -> IF assignment_expression compound_statement','selection_statement',3,'p_selection_statement','calclex.py',324),
  ('selection_statement -> IF assignment_expression compound_statement ELSE compound_statement','selection_statement',5,'p_selection_statement','calclex.py',325),
  ('iteration_statement -> FOR LPAREN NUMERO RPAREN DOSPUNTOS','iteration_statement',5,'p_iteration_statement','calclex.py',330),
  ('empty -> <empty>','empty',0,'p_empty','calclex.py',341),
]
